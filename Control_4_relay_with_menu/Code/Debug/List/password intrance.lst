
AVRASM ver. 2.1.30  F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm Wed Mar 27 00:11:43 2024

F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _state=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0057 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 3837
00002b 2f39
00002c 3534
00002d 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
00002e 3231
00002f 2d33
000030 3063
000031 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x63,0x30,0x3D,0x2B
                 _0x4:
000032 0d0e
000033 070b      	.DB  0xE,0xD,0xB,0x7
                 _0x0:
000034 6150
000035 7373
000036 6f77
000037 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
000038 203a
000039 4300
00003a 726f
00003b 6572      	.DB  0x3A,0x20,0x0,0x43,0x6F,0x72,0x72,0x65
00003c 7463
00003d 4600
00003e 6375
00003f 206b      	.DB  0x63,0x74,0x0,0x46,0x75,0x63,0x6B,0x20
000040 666f
000041 2066
F:\AVR\Gard_AVR\Gard\P4_PassWord\simulation\Code\Debug\List\password intrance.asm(1131): warning: .cseg .db misalignment - padding zero byte
000042 0000      	.DB  0x6F,0x66,0x66,0x20,0x0
                 _0x2000003:
000043 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000044 0010      	.DW  0x10
000045 027d      	.DW  _keypad
000046 0054      	.DW  _0x3*2
                 
000047 0004      	.DW  0x04
000048 028d      	.DW  _keypad_x
000049 0064      	.DW  _0x4*2
                 
00004a 000b      	.DW  0x0B
00004b 0260      	.DW  _0x15
00004c 0068      	.DW  _0x0*2
                 
00004d 0008      	.DW  0x08
00004e 026b      	.DW  _0x15+11
00004f 0073      	.DW  _0x0*2+11
                 
000050 000a      	.DW  0x0A
000051 0273      	.DW  _0x15+19
000052 007b      	.DW  _0x0*2+19
                 
000053 0002      	.DW  0x02
000054 0291      	.DW  __base_y_G100
000055 0086      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000056 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000057 94f8      	CLI
000058 27ee      	CLR  R30
000059 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005a e0f1      	LDI  R31,1
00005b bffb      	OUT  GICR,R31
00005c bfeb      	OUT  GICR,R30
00005d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005e e08d      	LDI  R24,(14-2)+1
00005f e0a2      	LDI  R26,2
000060 27bb      	CLR  R27
                 __CLEAR_REG:
000061 93ed      	ST   X+,R30
000062 958a      	DEC  R24
000063 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000064 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000065 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000066 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000067 93ed      	ST   X+,R30
000068 9701      	SBIW R24,1
000069 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006a e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006c 9185      	LPM  R24,Z+
00006d 9195      	LPM  R25,Z+
00006e 9700      	SBIW R24,0
00006f f061      	BREQ __GLOBAL_INI_END
000070 91a5      	LPM  R26,Z+
000071 91b5      	LPM  R27,Z+
000072 9005      	LPM  R0,Z+
000073 9015      	LPM  R1,Z+
000074 01bf      	MOVW R22,R30
000075 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000076 9005      	LPM  R0,Z+
000077 920d      	ST   X+,R0
000078 9701      	SBIW R24,1
000079 f7e1      	BRNE __GLOBAL_INI_LOOP
00007a 01fb      	MOVW R30,R22
00007b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007d bfed      	OUT  SPL,R30
00007e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000080 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000081 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000082 940c 0084 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;Project :Password
                 ;Version :0.0
                 ;Date    : 3/16/2024
                 ;Chip type               : ATmega32
                 ;
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#define Y1   PINC.4
                 ;#define Y2   PINC.5
                 ;#define Y3   PINC.6
                 ;#define Y4   PINC.7
                 ;
                 ;// Alphanumeric LCD functions
                 ;void lcd_blink();
                 ;// Declare your global variables here
                 ;enum menu_state
                 ;{
                 ;    password,
                 ;    password_correct,
                 ;    password_wrong
                 ;}state;
                 ;unsigned char keypad[4][4]={{'7','8','9','/'},//1
                 ;                            {'4','5','6','*'},//2
                 ;                            {'1','2','3','-'},//3
                 ;                            {'c','0','=','+'}};//4
                 
                 	.DSEG
                 ;unsigned char keypad_x[4]={0x0e,0x0d,0x0b,0x07};
                 ;void main(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0025 
                 ; 0000 0026 /////////////////// Declare your local variables here
                 ; 0000 0027 unsigned char keypad_counter=0,temp_char,pass_indic=0,pass_counter=0,pass_str[5];
                 ; 0000 0028 ///////////////////Start of MCU pin init:
                 ; 0000 0029 DDRB=0XFF;
000084 9725      	SBIW R28,5
                 ;	keypad_counter -> R17
                 ;	temp_char -> R16
                 ;	pass_indic -> R19
                 ;	pass_counter -> R18
                 ;	pass_str -> Y+0
000085 e010      	LDI  R17,0
000086 e030      	LDI  R19,0
000087 e020      	LDI  R18,0
000088 efef      	LDI  R30,LOW(255)
000089 bbe7      	OUT  0x17,R30
                 ; 0000 002A DDRC=0X0f;
00008a e0ef      	LDI  R30,LOW(15)
00008b bbe4      	OUT  0x14,R30
                 ; 0000 002B PORTC=0X0f;
00008c bbe5      	OUT  0x15,R30
                 ; 0000 002C 
                 ; 0000 002D ///////////////////End of MCU pin init
                 ; 0000 002E 
                 ; 0000 002F ///////////////////LCD initial:
                 ; 0000 0030 lcd_init(16);
00008d e1a0      	LDI  R26,LOW(16)
00008e d0fc      	RCALL _lcd_init
                 ; 0000 0031 lcd_blink();
00008f d095      	RCALL _lcd_blink
                 ; 0000 0032 state=password;
000090 2455      	CLR  R5
                 ; 0000 0033 while (1)
                 _0x5:
                 ; 0000 0034       {
                 ; 0000 0035       temp_char=1;
000091 e001      	LDI  R16,LOW(1)
                 ; 0000 0036       // Place your code here
                 ; 0000 0037       ///////////////////////////Keypad:////////////////////////////////////////
                 ; 0000 0038       for (keypad_counter=0;keypad_counter<4;keypad_counter++)
000092 e010      	LDI  R17,LOW(0)
                 _0x9:
000093 3014      	CPI  R17,4
000094 f5f0      	BRSH _0xA
                 ; 0000 0039         {
                 ; 0000 003A         PORTC=keypad_x[keypad_counter];
000095 2fe1      	MOV  R30,R17
000096 e0f0      	LDI  R31,0
000097 57e3      	SUBI R30,LOW(-_keypad_x)
000098 4ffd      	SBCI R31,HIGH(-_keypad_x)
000099 81e0      	LD   R30,Z
00009a bbe5      	OUT  0x15,R30
                 ; 0000 003B 
                 ; 0000 003C         if (Y1==0|Y2==0|Y3==0|Y4==0)
00009b e0a0      	LDI  R26,0
00009c 999c      	SBIC 0x13,4
00009d e0a1      	LDI  R26,1
00009e e0e0      	LDI  R30,LOW(0)
00009f 940e 01d8 	CALL __EQB12
0000a1 2e0e      	MOV  R0,R30
0000a2 e0a0      	LDI  R26,0
0000a3 999d      	SBIC 0x13,5
0000a4 e0a1      	LDI  R26,1
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 940e 01d8 	CALL __EQB12
0000a8 2a0e      	OR   R0,R30
0000a9 e0a0      	LDI  R26,0
0000aa 999e      	SBIC 0x13,6
0000ab e0a1      	LDI  R26,1
0000ac e0e0      	LDI  R30,LOW(0)
0000ad 940e 01d8 	CALL __EQB12
0000af 2a0e      	OR   R0,R30
0000b0 e0a0      	LDI  R26,0
0000b1 999f      	SBIC 0x13,7
0000b2 e0a1      	LDI  R26,1
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 940e 01d8 	CALL __EQB12
0000b6 29e0      	OR   R30,R0
0000b7 f0c9      	BREQ _0xB
                 ; 0000 003D             {
                 ; 0000 003E             if (Y1==0)
0000b8 999c      	SBIC 0x13,4
0000b9 c004      	RJMP _0xC
                 ; 0000 003F                 {
                 ; 0000 0040                 temp_char=keypad[keypad_counter][0];
0000ba d0fb      	RCALL SUBOPT_0x0
0000bb 0fae      	ADD  R26,R30
0000bc 1fbf      	ADC  R27,R31
0000bd 910c      	LD   R16,X
                 ; 0000 0041 
                 ; 0000 0042                 }//for>>if>>if Y1
                 ; 0000 0043             if (Y2==0)
                 _0xC:
0000be 999d      	SBIC 0x13,5
0000bf c004      	RJMP _0xD
                 ; 0000 0044                 {
                 ; 0000 0045                 temp_char=keypad[keypad_counter][1];
0000c0 d0f5      	RCALL SUBOPT_0x0
0000c1 0fea      	ADD  R30,R26
0000c2 1ffb      	ADC  R31,R27
0000c3 8101      	LDD  R16,Z+1
                 ; 0000 0046                 //lcd_putchar(temp_char);
                 ; 0000 0047                 }//for>>if>>if Y1
                 ; 0000 0048             if (Y3==0)
                 _0xD:
0000c4 999e      	SBIC 0x13,6
0000c5 c004      	RJMP _0xE
                 ; 0000 0049                 {
                 ; 0000 004A                 temp_char=keypad[keypad_counter][2];
0000c6 d0ef      	RCALL SUBOPT_0x0
0000c7 0fea      	ADD  R30,R26
0000c8 1ffb      	ADC  R31,R27
0000c9 8102      	LDD  R16,Z+2
                 ; 0000 004B                 //lcd_putchar(temp_char);
                 ; 0000 004C                 }//for>>if>>if Y1
                 ; 0000 004D             if (Y4==0)
                 _0xE:
0000ca 999f      	SBIC 0x13,7
0000cb c004      	RJMP _0xF
                 ; 0000 004E                 {
                 ; 0000 004F                 temp_char=keypad[keypad_counter][3];
0000cc d0e9      	RCALL SUBOPT_0x0
0000cd 0fea      	ADD  R30,R26
0000ce 1ffb      	ADC  R31,R27
0000cf 8103      	LDD  R16,Z+3
                 ; 0000 0050                 //lcd_putchar(temp_char);
                 ; 0000 0051                 }//for>>if>>if Y's
                 ; 0000 0052             break;
                 _0xF:
0000d0 c002      	RJMP _0xA
                 ; 0000 0053             }//if
                 ; 0000 0054         }//for
                 _0xB:
0000d1 5f1f      	SUBI R17,-1
0000d2 cfc0      	RJMP _0x9
                 _0xA:
                 ; 0000 0055       //if you have pressed any buttom then it's equal to tempchar
                 ; 0000 0056       ///////////////////////////End of Keypad/////////////////////////////////
                 ; 0000 0057 
                 ; 0000 0058 ///////////////////////////////decision making unit:///////////////////////////
                 ; 0000 0059       switch (state)
0000d3 2de5      	MOV  R30,R5
0000d4 e0f0      	LDI  R31,0
                 ; 0000 005A         {
                 ; 0000 005B         case password:
0000d5 9730      	SBIW R30,0
0000d6 f561      	BRNE _0x13
                 ; 0000 005C             {
                 ; 0000 005D              if (pass_indic==0)
0000d7 3030      	CPI  R19,0
0000d8 f451      	BRNE _0x14
                 ; 0000 005E                 {
                 ; 0000 005F                 lcd_clear();
0000d9 d081      	RCALL _lcd_clear
                 ; 0000 0060                 lcd_puts("Password: ");
                +
0000da e6a0     +LDI R26 , LOW ( _0x15 + ( 0 ) )
0000db e0b2     +LDI R27 , HIGH ( _0x15 + ( 0 ) )
                 	__POINTW2MN _0x15,0
0000dc d09d      	RCALL _lcd_puts
                 ; 0000 0061                 delay_ms(1);
0000dd e0a1      	LDI  R26,LOW(1)
0000de e0b0      	LDI  R27,0
0000df 940e 01c9 	CALL _delay_ms
                 ; 0000 0062                 lcd_blink();
0000e1 d043      	RCALL _lcd_blink
                 ; 0000 0063                 pass_indic=1;
0000e2 e031      	LDI  R19,LOW(1)
                 ; 0000 0064                 }
                 ; 0000 0065              if (temp_char!=1)
                 _0x14:
0000e3 3001      	CPI  R16,1
0000e4 f049      	BREQ _0x16
                 ; 0000 0066                 {
                 ; 0000 0067                 *(pass_str+pass_counter)=temp_char;
0000e5 2fe2      	MOV  R30,R18
0000e6 e0f0      	LDI  R31,0
0000e7 01de      	MOVW R26,R28
0000e8 0fea      	ADD  R30,R26
0000e9 1ffb      	ADC  R31,R27
0000ea 8300      	ST   Z,R16
                 ; 0000 0068                 lcd_putchar('*');
0000eb e2aa      	LDI  R26,LOW(42)
0000ec d078      	RCALL _lcd_putchar
                 ; 0000 0069                 pass_counter++;
0000ed 5f2f      	SUBI R18,-1
                 ; 0000 006A 
                 ; 0000 006B                 };
                 _0x16:
                 ; 0000 006C              if (pass_counter==4)
0000ee 3024      	CPI  R18,4
0000ef f491      	BRNE _0x17
                 ; 0000 006D                 {
                 ; 0000 006E                 pass_counter=0;
0000f0 e020      	LDI  R18,LOW(0)
                 ; 0000 006F                  if (pass_str[0]=='1'&&pass_str[1]=='4'&&pass_str[2]=='0'&&pass_str[3]=='2')
0000f1 81a8      	LD   R26,Y
0000f2 33a1      	CPI  R26,LOW(0x31)
0000f3 f449      	BRNE _0x19
0000f4 81a9      	LDD  R26,Y+1
0000f5 33a4      	CPI  R26,LOW(0x34)
0000f6 f431      	BRNE _0x19
0000f7 81aa      	LDD  R26,Y+2
0000f8 33a0      	CPI  R26,LOW(0x30)
0000f9 f419      	BRNE _0x19
0000fa 81ab      	LDD  R26,Y+3
0000fb 33a2      	CPI  R26,LOW(0x32)
0000fc f009      	BREQ _0x1A
                 _0x19:
0000fd c002      	RJMP _0x18
                 _0x1A:
                 ; 0000 0070                     {
                 ; 0000 0071                     state=password_correct;
0000fe e0e1      	LDI  R30,LOW(1)
0000ff c001      	RJMP _0x1F
                 ; 0000 0072                     }
                 ; 0000 0073                  else
                 _0x18:
                 ; 0000 0074                      {
                 ; 0000 0075                      state=password_wrong;
000100 e0e2      	LDI  R30,LOW(2)
                 _0x1F:
000101 2e5e      	MOV  R5,R30
                 ; 0000 0076                      }
                 ; 0000 0077                 }
                 ; 0000 0078             break;
                 _0x17:
000102 c01c      	RJMP _0x12
                 ; 0000 0079             }
                 ; 0000 007A         case password_correct:
                 _0x13:
000103 30e1      	CPI  R30,LOW(0x1)
000104 e0a0      	LDI  R26,HIGH(0x1)
000105 07fa      	CPC  R31,R26
000106 f469      	BRNE _0x1C
                 ; 0000 007B             {
                 ; 0000 007C             lcd_clear();
000107 d053      	RCALL _lcd_clear
                 ; 0000 007D             delay_ms(1);
000108 e0a1      	LDI  R26,LOW(1)
000109 e0b0      	LDI  R27,0
00010a 940e 01c9 	CALL _delay_ms
                 ; 0000 007E             lcd_puts("Correct");
                +
00010c e6ab     +LDI R26 , LOW ( _0x15 + ( 11 ) )
00010d e0b2     +LDI R27 , HIGH ( _0x15 + ( 11 ) )
                 	__POINTW2MN _0x15,11
00010e d06b      	RCALL _lcd_puts
                 ; 0000 007F             delay_ms(1000);
00010f eea8      	LDI  R26,LOW(1000)
000110 e0b3      	LDI  R27,HIGH(1000)
000111 940e 01c9 	CALL _delay_ms
                 ; 0000 0080             state=password;
000113 c009      	RJMP _0x20
                 ; 0000 0081             pass_indic=0;
                 ; 0000 0082             break;
                 ; 0000 0083             }
                 ; 0000 0084         case password_wrong:
                 _0x1C:
000114 30e2      	CPI  R30,LOW(0x2)
000115 e0a0      	LDI  R26,HIGH(0x2)
000116 07fa      	CPC  R31,R26
000117 f439      	BRNE _0x12
                 ; 0000 0085             {
                 ; 0000 0086             lcd_clear();
000118 d042      	RCALL _lcd_clear
                 ; 0000 0087             lcd_puts("Fuck off ");
                +
000119 e7a3     +LDI R26 , LOW ( _0x15 + ( 19 ) )
00011a e0b2     +LDI R27 , HIGH ( _0x15 + ( 19 ) )
                 	__POINTW2MN _0x15,19
00011b d05e      	RCALL _lcd_puts
                 ; 0000 0088             PORTB|=(1<<0);
00011c 9ac0      	SBI  0x18,0
                 ; 0000 0089             state=password;
                 _0x20:
00011d 2455      	CLR  R5
                 ; 0000 008A             pass_indic=0;
00011e e030      	LDI  R19,LOW(0)
                 ; 0000 008B             break;
                 ; 0000 008C             }
                 ; 0000 008D 
                 ; 0000 008E         }//switch
                 _0x12:
                 ; 0000 008F       delay_ms(225);
00011f eea1      	LDI  R26,LOW(225)
000120 e0b0      	LDI  R27,0
000121 940e 01c9 	CALL _delay_ms
                 ; 0000 0090       }//while
000123 cf6d      	RJMP _0x5
                 ; 0000 0091 }//main
                 _0x1E:
000124 cfff      	RJMP _0x1E
                 ; .FEND
                 
                 	.DSEG
                 _0x15:
000260           	.BYTE 0x1D
                 ;
                 ;
                 ;
                 ;void lcd_blink()
                 ; 0000 0096 {
                 
                 	.CSEG
                 _lcd_blink:
                 ; .FSTART _lcd_blink
                 ; 0000 0097 PORTA=0B00000100;
000125 e0e4      	LDI  R30,LOW(4)
000126 bbeb      	OUT  0x1B,R30
                 ; 0000 0098 PORTA=0B00000000;
000127 e0e0      	LDI  R30,LOW(0)
000128 bbeb      	OUT  0x1B,R30
                 ; 0000 0099 PORTA=0B11110100;
000129 efe4      	LDI  R30,LOW(244)
00012a bbeb      	OUT  0x1B,R30
                 ; 0000 009A PORTA=0B11110000;
00012b efe0      	LDI  R30,LOW(240)
00012c bbeb      	OUT  0x1B,R30
                 ; 0000 009B 
                 ; 0000 009C }
00012d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012e 93aa      	ST   -Y,R26
00012f b3eb      	IN   R30,0x1B
000130 70ef      	ANDI R30,LOW(0xF)
000131 2fae      	MOV  R26,R30
000132 81e8      	LD   R30,Y
000133 7fe0      	ANDI R30,LOW(0xF0)
000134 2bea      	OR   R30,R26
000135 bbeb      	OUT  0x1B,R30
                +
000136 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000137 958a     +DEC R24
000138 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000139 9ada      	SBI  0x1B,2
                +
00013a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013b 958a     +DEC R24
00013c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013d 98da      	CBI  0x1B,2
                +
00013e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013f 958a     +DEC R24
000140 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000141 c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000142 93aa      	ST   -Y,R26
000143 81a8      	LD   R26,Y
000144 dfe9      	RCALL __lcd_write_nibble_G100
000145 81e8          ld    r30,y
000146 95e2          swap  r30
000147 83e8          st    y,r30
000148 81a8      	LD   R26,Y
000149 dfe4      	RCALL __lcd_write_nibble_G100
                +
00014a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00014b 958a     +DEC R24
00014c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00014d c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014e 93aa      	ST   -Y,R26
00014f 81e8      	LD   R30,Y
000150 e0f0      	LDI  R31,0
000151 56ef      	SUBI R30,LOW(-__base_y_G100)
000152 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000153 81e0      	LD   R30,Z
000154 81a9      	LDD  R26,Y+1
000155 0fae      	ADD  R26,R30
000156 dfeb      	RCALL __lcd_write_data
000157 8049      	LDD  R4,Y+1
000158 8078      	LDD  R7,Y+0
000159 9622      	ADIW R28,2
00015a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00015b e0a2      	LDI  R26,LOW(2)
00015c d060      	RCALL SUBOPT_0x1
00015d e0ac      	LDI  R26,LOW(12)
00015e dfe3      	RCALL __lcd_write_data
00015f e0a1      	LDI  R26,LOW(1)
000160 d05c      	RCALL SUBOPT_0x1
000161 e0e0      	LDI  R30,LOW(0)
000162 2e7e      	MOV  R7,R30
000163 2e4e      	MOV  R4,R30
000164 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000165 93aa      	ST   -Y,R26
000166 81a8      	LD   R26,Y
000167 30aa      	CPI  R26,LOW(0xA)
000168 f011      	BREQ _0x2000005
000169 1446      	CP   R4,R6
00016a f048      	BRLO _0x2000004
                 _0x2000005:
00016b e0e0      	LDI  R30,LOW(0)
00016c 93ea      	ST   -Y,R30
00016d 9473      	INC  R7
00016e 2da7      	MOV  R26,R7
00016f dfde      	RCALL _lcd_gotoxy
000170 81a8      	LD   R26,Y
000171 30aa      	CPI  R26,LOW(0xA)
000172 f409      	BRNE _0x2000007
000173 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000174 9443      	INC  R4
000175 9ad8      	SBI  0x1B,0
000176 81a8      	LD   R26,Y
000177 dfca      	RCALL __lcd_write_data
000178 98d8      	CBI  0x1B,0
000179 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00017a 93ba      	ST   -Y,R27
00017b 93aa      	ST   -Y,R26
00017c 931a      	ST   -Y,R17
                 _0x2000008:
00017d 81a9      	LDD  R26,Y+1
00017e 81ba      	LDD  R27,Y+1+1
00017f 91ed      	LD   R30,X+
000180 83a9      	STD  Y+1,R26
000181 83ba      	STD  Y+1+1,R27
000182 2f1e      	MOV  R17,R30
000183 30e0      	CPI  R30,0
000184 f019      	BREQ _0x200000A
000185 2fa1      	MOV  R26,R17
000186 dfde      	RCALL _lcd_putchar
000187 cff5      	RJMP _0x2000008
                 _0x200000A:
000188 8118      	LDD  R17,Y+0
000189 9623      	ADIW R28,3
00018a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00018b 93aa      	ST   -Y,R26
00018c b3ea      	IN   R30,0x1A
00018d 6fe0      	ORI  R30,LOW(0xF0)
00018e bbea      	OUT  0x1A,R30
00018f 9ad2      	SBI  0x1A,2
000190 9ad0      	SBI  0x1A,0
000191 9ad1      	SBI  0x1A,1
000192 98da      	CBI  0x1B,2
000193 98d8      	CBI  0x1B,0
000194 98d9      	CBI  0x1B,1
000195 8068      	LDD  R6,Y+0
000196 81e8      	LD   R30,Y
000197 58e0      	SUBI R30,-LOW(128)
                +
000198 93e0 0293+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00019a 81e8      	LD   R30,Y
00019b 54e0      	SUBI R30,-LOW(192)
                +
00019c 93e0 0294+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019e e1a4      	LDI  R26,LOW(20)
00019f e0b0      	LDI  R27,0
0001a0 940e 01c9 	CALL _delay_ms
0001a2 d01f      	RCALL SUBOPT_0x2
0001a3 d01e      	RCALL SUBOPT_0x2
0001a4 d01d      	RCALL SUBOPT_0x2
0001a5 e2a0      	LDI  R26,LOW(32)
0001a6 df87      	RCALL __lcd_write_nibble_G100
                +
0001a7 ec88     +LDI R24 , LOW ( 200 )
0001a8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a9 9701     +SBIW R24 , 1
0001aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ab e2a8      	LDI  R26,LOW(40)
0001ac df95      	RCALL __lcd_write_data
0001ad e0a4      	LDI  R26,LOW(4)
0001ae df93      	RCALL __lcd_write_data
0001af e8a5      	LDI  R26,LOW(133)
0001b0 df91      	RCALL __lcd_write_data
0001b1 e0a6      	LDI  R26,LOW(6)
0001b2 df8f      	RCALL __lcd_write_data
0001b3 dfa7      	RCALL _lcd_clear
                 _0x2020001:
0001b4 9621      	ADIW R28,1
0001b5 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _keypad:
00027d           	.BYTE 0x10
                 _keypad_x:
00028d           	.BYTE 0x4
                 __base_y_G100:
000291           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0001b6 2fe1      	MOV  R30,R17
0001b7 e7ad      	LDI  R26,LOW(_keypad)
0001b8 e0b2      	LDI  R27,HIGH(_keypad)
0001b9 e0f0      	LDI  R31,0
0001ba 940e 01d3 	CALL __LSLW2
0001bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001bd df84      	RCALL __lcd_write_data
0001be e0a3      	LDI  R26,LOW(3)
0001bf e0b0      	LDI  R27,0
0001c0 940c 01c9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001c2 e3a0      	LDI  R26,LOW(48)
0001c3 df6a      	RCALL __lcd_write_nibble_G100
                +
0001c4 ec88     +LDI R24 , LOW ( 200 )
0001c5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001c6 9701     +SBIW R24 , 1
0001c7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001c8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001c9 9610      	adiw r26,0
0001ca f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001cb ed80     +LDI R24 , LOW ( 0x7D0 )
0001cc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001cd 9701     +SBIW R24 , 1
0001ce f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001cf 95a8      	wdr
0001d0 9711      	sbiw r26,1
0001d1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001d2 9508      	ret
                 
                 __LSLW2:
0001d3 0fee      	LSL  R30
0001d4 1fff      	ROL  R31
0001d5 0fee      	LSL  R30
0001d6 1fff      	ROL  R31
0001d7 9508      	RET
                 
                 __EQB12:
0001d8 17ea      	CP   R30,R26
0001d9 e0e1      	LDI  R30,1
0001da f009      	BREQ __EQB12T
0001db 27ee      	CLR  R30
                 __EQB12T:
0001dc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  10 r18:   5 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  74 r27:  20 r28:   6 r29:   1 r30:  89 r31:  19 
x  :   5 y  :  33 z  :  13 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   2 cpi   :  13 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  15 ldd   :  13 ldi   :  91 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  12 movw  :   4 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   4 
ori   :   1 out   :  16 pop   :   0 push  :   0 rcall :  34 ret   :  10 
reti  :   0 rjmp  :  18 rol   :   2 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   6 sbic  :   8 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   2 sts   :   2 sub   :   0 subi  :   6 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003ba    864     90    954   32768   2.9%
[.dseg] 0x000060 0x000295      0     53     53    2048   2.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
